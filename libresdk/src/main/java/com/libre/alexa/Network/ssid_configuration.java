package com.libre.alexa.Network;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.wifi.ScanResult;import android.net.wifi.SupplicantState;import android.net.wifi.WifiConfiguration;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Bundle;import android.os.Handler;import android.os.Message;import androidx.core.app.ActivityCompat;import androidx.appcompat.widget.Toolbar;import android.text.Editable;import android.text.Html;import android.text.TextUtils;import android.text.TextWatcher;import android.text.method.PasswordTransformationMethod;import android.util.Log;import android.view.Gravity;import android.view.KeyEvent;import android.view.MotionEvent;import android.view.View;import android.view.inputmethod.EditorInfo;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ExpandableListView;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.libre.alexa.DeviceDiscoveryActivity;import com.libre.alexa.LErrorHandeling.LibreError;import com.libre.alexa.LibreApplication;import com.libre.alexa.Ls9Sac.ConnectingToMainNetwork;import com.libre.alexa.R;import com.libre.alexa.Scanning.Constants;import com.libre.alexa.Scanning.ScanningHandler;import com.libre.alexa.constants.LSSDPCONST;import com.libre.alexa.constants.MIDCONST;import com.libre.alexa.luci.LSSDPNodes;import com.libre.alexa.luci.LUCIControl;import com.libre.alexa.netty.BusProvider;import com.libre.alexa.netty.LibreDeviceInteractionListner;import com.libre.alexa.netty.NettyData;import com.libre.alexa.serviceinterface.LSDeviceClient;import com.libre.alexa.util.LibreLogger;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeMap;import retrofit.Callback;import retrofit.RetrofitError;import retrofit.client.Response;/** * Created by karunakaran on 8/2/2015. */public class ssid_configuration extends DeviceDiscoveryActivity implements LibreDeviceInteractionListner {    ExpandableListView mSSIDList;    ExpandableListAdapters listAdapter;    CheckBox isManualSettings;    LinearLayout manualSettingsLayout,passwordLyt;    Spinner mSsidSpinner,networkTypeSpinner,mKeyItemSpinner;    EditText deviceName, ssid_password,manualSSID;    private EditText outdoorHNPassphrase;    TextView title,titleKeyItemSpinner;    ImageView reload;    private ImageButton m_back;    public WifiManager mWifiManager = null;    List<ScanResult> mScanResults;    private static final String TAG = "ssid_configuration";    public final int mLower2GHzFrequency = 2412;    public final int mHigher2GHzFrequency = 2484;    public static final String PSK = "PSK";    public static final String WEP = "WEP";    public static final String OPEN = "Open";    private static final int MAX_PRIORITY = 99999;    ConnectionReceiver connectionReceiver;    @Override    protected void onStop() {        if (httpPostingDataUrlConnection != null) {            httpPostingDataUrlConnection.disconnect();            httpPostingDataUrlConnection = null;        }        super.onStop();    }    @Override    protected void onDestroy() {        try {            if (mHandler.hasMessages(Constants.CONNECTED_TO_MAIN_SSID_SUCCESS)) {                mHandler.removeMessages(Constants.CONNECTED_TO_MAIN_SSID_SUCCESS);            }            if (mHandler.hasMessages(Constants.CONNECTED_TO_MAIN_SSID_FAIL)) {                mHandler.removeMessages(Constants.CONNECTED_TO_MAIN_SSID_FAIL);            }            mHandler.removeCallbacks(null);        } catch (Exception e) {        }        try {            unregisterReceiver(connectionReceiver);        } catch (Exception e) {        }        super.onDestroy();    }    ScanningHandler mScanHandler = ScanningHandler.getInstance();    WifiConnection wifiConnect = WifiConnection.getInstance();    String deviceSSID = "";    String deviceIp = "";    String activityName = "";    HashMap<String, List<String>> devicesListHashMap = new HashMap<>();    List<String> deviceListDataHeader = new ArrayList<>();    Button sacSave;    ImageButton deviceNameImgBtn;    Button btnSave;    public ProgressDialog mProgressDialog;    public void closeLoader() {        runOnUiThread(new Runnable() {            @Override            public void run() {                if (mProgressDialog != null && mProgressDialog.isShowing() && isFinishing() == false) {                    if (!(ssid_configuration.this.isFinishing())) {                        Log.e("LuciControl", "progress Dialog Closed");                        mProgressDialog.setCancelable(false);                        mProgressDialog.dismiss();                        mProgressDialog.cancel();                    }                }            }        });    }    public void handleScanResultsAvailable() {        /*wifiConnect.clearWifiScanResult();        wifiConnect.clearSacDevices();        mWifiManager.startScan();*/        List<ScanResult> list = mWifiManager.getScanResults();        if (list != null) {            for (int i = list.size() - 1; i >= 0; i--) {                final ScanResult scanResult = list.get(i);                if (scanResult == null) {                    continue;                }                if (TextUtils.isEmpty(scanResult.SSID)) {                    continue;                }                if (mLower2GHzFrequency <= scanResult.frequency && scanResult.frequency <= mHigher2GHzFrequency) {                    //wifiConnect.putWifiScanResultSecurity(scanResult.SSID, scanResult.capabilities);                }            }        }    }    public void showLoader(final String msg) {        runOnUiThread(new Runnable() {            @Override            public void run() {                if (mProgressDialog == null) {                    Log.e("LUCIControl", "Null");                    mProgressDialog = ProgressDialog.show(ssid_configuration.this, getString(R.string.notice), msg + "...", true, true, null);                }                if (!mProgressDialog.isShowing()) {                    if (!(ssid_configuration.this.isFinishing())) {                        mProgressDialog = ProgressDialog.show(ssid_configuration.this, getString(R.string.notice), msg + "...", true, true, null);                    }                }                mProgressDialog.setCancelable(false);            }        });    }    @Override    public void onBackPressed() {        if(deviceName.isEnabled())        {            new AlertDialog.Builder(ssid_configuration.this)                    .setTitle(getString(R.string.deviceNameChanging))                    .setMessage(getString(R.string.deviceNameChangingMsg))                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int which) {                            processBackPress();                            finish();                        }                    }).setIcon(android.R.drawable.ic_dialog_alert)                    .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            dialog.cancel();                        }                    })                    .show();        } else {            processBackPress();        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_sac_network_settings);        mWifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);        outdoorHNPassphrase = (EditText) findViewById(R.id.outdoor_hn_passphrase);        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayShowTitleEnabled(false);        registerForDeviceEvents(this);        disableNetworkChangeCallBack();        title = (TextView) findViewById(R.id.textView4);        ssid_password = (EditText) findViewById(R.id.sac_setup_password);        passwordLyt = (LinearLayout)findViewById(R.id.passwordLyt);        ssid_password.setTransformationMethod(new PasswordTransformationMethod());        ssid_password.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                final int DRAWABLE_RIGHT = 2;                if (event.getAction() == MotionEvent.ACTION_UP) {                    try {                        if (event.getRawX() >= (ssid_password.getRight() - ssid_password.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width())) {                            if(ssid_password.getTag().toString().contains("hidden"))                            {                                ssid_password.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.password_hide, 0);                                ssid_password.setTransformationMethod(null);                                ssid_password.setTag("visible");                            }else{                                ssid_password.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.password_visible, 0);                                ssid_password.setTransformationMethod(new PasswordTransformationMethod());                                ssid_password.setTag("hidden");                            }                            return true;                        }                    } catch (Exception e) {                        //Toast.makeText(getApplication(), "dsd", Toast.LENGTH_SHORT).show();                        LibreLogger.d(this, "ignore this log");                    }                }                return false;            }        });        manualSSID = (EditText)findViewById((R.id.manualSSID));        title.setText(getResources().getString(R.string.deviceName));        /* Getting the Intent Data */        Intent myIntent = getIntent(); // gets the previously created intent        deviceSSID = myIntent.getStringExtra("DeviceSSID");        deviceIp = myIntent.getStringExtra("DeviceIP");        activityName = myIntent.getStringExtra("activity");        if(activityName == null)            activityName="";         if(activityName.equals("LSSDPDeviceNetworkSettings"))        {            showLoader("Getting Device ScanResults..");            WifiConnection.getInstance().clearWifiScanResult();            getScanResultsForIp(deviceIp);        }        mSsidSpinner = (Spinner) findViewById(R.id.ssidSpinner);        deviceName = (EditText) findViewById(R.id.eTSceneName);        setPassphraseVisibility(deviceSSID.trim());        handleScanResultsAvailable();        deviceNameImgBtn = (ImageButton) findViewById(R.id.btnSceneName);        deviceNameImgBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!deviceName.isEnabled()) {                    deviceNameImgBtn.setImageResource(R.mipmap.check);                    deviceName.setClickable(true);                    deviceName.setEnabled(true);                    deviceName.setFocusableInTouchMode(true);                    deviceName.setFocusable(true);                    deviceName.requestFocus();                    deviceName.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.cancwel, 0);                    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                    imm.showSoftInput(deviceName, InputMethodManager.SHOW_IMPLICIT);                } else {                    deviceNameImgBtn.setImageResource(R.mipmap.ic_mode_edit_black_24dp);                    deviceName.setClickable(false);                    deviceName.setEnabled(false);                    deviceName.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);                    if(!deviceSSID.equalsIgnoreCase(deviceName.getText().toString())) {                        if (activityName.equalsIgnoreCase("LSSDPDeviceNetworkSettings")) {                            new LUCIControl(deviceIp).SendCommand(MIDCONST.MID_DEVNAME,deviceName.getText().toString(), LSSDPCONST.LUCI_SET);                        }                    }                }            }        });        deviceName.addTextChangedListener(new TextWatcher() {            public void afterTextChanged(Editable s) {            }            public void beforeTextChanged(CharSequence s, int start,                                          int count, int after) {            }            public void onTextChanged(CharSequence s, int start,                                      int before, int count) {                // if(! deviceName.isClickable()) {                if (getCurrentFocus() == deviceName && deviceName.isEnabled()) {                    deviceName.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.cancwel, 0);                    if (s.length() > 50)                        Toast.makeText(getApplicationContext(), getString(R.string.deviceLength), Toast.LENGTH_SHORT).show();                    else if (s.length() <= 0)                        deviceName.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);                }            }        });        deviceName.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                final int DRAWABLE_RIGHT = 2;                if (event.getAction() == MotionEvent.ACTION_UP) {                    try {                        if (event.getRawX() >= (deviceName.getRight() - deviceName.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width())) {                            // your action here                            deviceName.setText("");                            return true;                        }                    } catch (Exception e) {                        //Toast.makeText(getApplication(), "dsd", Toast.LENGTH_SHORT).show();                        LibreLogger.d(this, "ignore this log");                    }                }                return false;            }        });        reload = (ImageView) findViewById(R.id.reload);        reload.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                showLoader("Getting Device ScanResults..");                WifiConnection.getInstance().clearWifiScanResult();                LibreLogger.d(this, "deviceIp " + deviceIp);                getScanResultsForIp(deviceIp);                //getScanResult();            }        });        if (activityName.equals("LSSDPDeviceNetworkSettings")) {            WifiConnection.getInstance().mPreviousSSID = LibreApplication.activeSSID;            deviceName.setText(deviceSSID);        } else {            deviceName.setText(wifiConnect.getssidDeviceNameSAC(deviceSSID.toString()));        }        sacSave = (Button) findViewById(R.id.btnSaveNetworkSettings);        ssid_password = (EditText) findViewById(R.id.sac_setup_password);        ssid_password.setImeOptions(EditorInfo.IME_ACTION_DONE);        ssid_password.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {                if(actionId == EditorInfo.IME_ACTION_DONE){                    sacSave.performClick();                }                return false;            }        });        mSsidSpinner = (Spinner) findViewById(R.id.ssidSpinner);        deviceName.setClickable(false);        deviceName.setEnabled(false);        sacSave.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(isManualSettings.isChecked()) {                    if(manualSSID.getText().toString().equalsIgnoreCase("")){                        wifiConnect.setMainSSID(manualSSID.getText().toString());                        LibreError error = new LibreError("Give Input in Manual SSID","");                        showErrorMessage(error);                        return;                    }                    wifiConnect.setMainSSID(manualSSID.getText().toString());                    LibreLogger.d(this, "goNext setting mainSSID to " + wifiConnect.getMainSSID());                }                alert = null;                String mMessageToDisplay = "";                if (wifiConnect.getMainSSIDSec().equalsIgnoreCase("NONE")) {                    mMessageToDisplay = getString(R.string.selectedConfigMsg) +                            "\n\nSSID :" + wifiConnect.getMainSSID();                } else {                    mMessageToDisplay = getString(R.string.selectedConfigMsg) +                            "\n\nSSID :" + wifiConnect.getMainSSID() ;                    if(ssid_password.getTag().equals("visible")){                        LibreLogger.d(this,"password should not be visible in alert");                        mMessageToDisplay+="\nPassword :" + ssid_password.getText().toString();                    }                }                if (!ssid_configuration.this.isFinishing()) {                    AlertDialog.Builder builder = new AlertDialog.Builder(ssid_configuration.this);                    builder.setMessage(mMessageToDisplay)                            .setCancelable(false)                            .setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog, int which) {                                    alert.dismiss();                                }                            })                            .setPositiveButton(getString(R.string.confirm), new DialogInterface.OnClickListener() {                                public void onClick(DialogInterface dialog, int id) {                                    if (deviceName.isEnabled()) {                                        new AlertDialog.Builder(ssid_configuration.this)                                                .setTitle(getString(R.string.deviceNameChanging))                                                .setMessage(getString(R.string.deviceNameChangingMsg))                                                .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {                                                    public void onClick(DialogInterface dialog, int which) {                                                        goNext();                                                    }                                                }).setIcon(android.R.drawable.ic_dialog_alert)                                                .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {                                                    @Override                                                    public void onClick(DialogInterface dialog, int which) {                                                        dialog.cancel();                                                    }                                                })                                                .show();                                    } else                                        goNext();                                    alert.dismiss();                                }                            });                    if (alert == null) {                        alert = builder.show();                        TextView messageView = (TextView)alert.findViewById(android.R.id.message);                        messageView.setGravity(Gravity.CENTER);                    }                    alert.show();                }               /*Enable this code if its For Sac Mode Through LUCI                    try {                    if(!LUCIControl.tcpSocketMap.contains("192.168.43.1")) {                        InetAddress address = InetAddress.getByName("192.168.43.1");                        NettyAndroidClient tcpSocketSendCtr = new NettyAndroidClient(address, 7777);                        LUCIControl.tcpSocketMap.put(address.getHostAddress(), tcpSocketSendCtr);                    }                    LUCIControl mLuci = new LUCIControl("192.168.43.1");                    mLuci.sendAsynchronousCommand();                    mLuci.SendCommand(125, "" + wifiConnect.getMainSSID() + "," + wifiConnect.getMainSSIDPwd(), LSSDPCONST.LUCI_SET);                }catch(Exception e){                    e.printStackTrace();                }*/            }        });        networkTypeSpinner = (Spinner)findViewById(R.id.networkType);        mKeyItemSpinner = (Spinner) findViewById(R.id.mWepKeyIdSpinner);        titleKeyItemSpinner = (TextView) findViewById(R.id.wepKeyIndexTitle);        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>                (this, android.R.layout.simple_spinner_item, wifiConnect.getFilteredSSIDsArrayList().toArray(new String[0]));        dataAdapter.setDropDownViewResource                (android.R.layout.simple_spinner_dropdown_item);        ArrayList<String> mSSIDLIST = wifiConnect.getFilteredSSIDsArrayList();        mSsidSpinner.setAdapter(dataAdapter);        //mSsidSpinner.setSelection(mSSIDLIST.indexOf(wifiConnect.getMainSSID()));        mSsidSpinner.setSelection(mSSIDLIST.indexOf(WifiConnection.getInstance().getPreviousSSID()));        mSsidSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                mDisplaySsidBasedInformation(parent.getItemAtPosition(position).toString());            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        //     mScanHandler.addHandler(mHandler);        // manual settings        isManualSettings = (CheckBox)findViewById(R.id.isManualCheckBox);        isManualSettings.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                LibreLogger.d(this, "bhargav checkBox " + isChecked);                manualSettingsLayout = (LinearLayout) findViewById(R.id.manualSettingsLayout);                if (isChecked) {                    // enable manual settings                    mSsidSpinner.setVisibility(View.GONE);                    manualSettingsLayout.setVisibility(View.VISIBLE);                    ssid_password.setText("");                    manualSSID.setText("");                    String[] networkTypeSpinnerArray = getResources().getStringArray(R.array.networkType_array);                    ArrayAdapter<String> networkTypeAdapter = new ArrayAdapter<String>                            (ssid_configuration.this, android.R.layout.simple_spinner_item, networkTypeSpinnerArray);                    networkTypeAdapter.setDropDownViewResource                            (android.R.layout.simple_spinner_dropdown_item);                    networkTypeSpinner.setAdapter(networkTypeAdapter);                } else {                    ssid_password.setText("");                    if (mSsidSpinner.getSelectedItem()!=null)                    mDisplaySsidBasedInformation(mSsidSpinner.getSelectedItem().toString());                    mSsidSpinner.setVisibility(View.VISIBLE);                    manualSettingsLayout.setVisibility(View.GONE);                }            }        });        networkTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                LibreLogger.d(this, parent.getItemAtPosition(position) + " selected");                wifiConnect.setMainSSIDSec(wifiConnect.getSSIDForSending(parent.getItemAtPosition(position).toString()));                LibreLogger.d(this, "securitytype is " + wifiConnect.getMainSSIDSec());                LibreLogger.d(this, "securitytype 1 is " + parent.getItemAtPosition(position).toString());                passwordLyt.setVisibility(View.VISIBLE);                if (parent.getItemAtPosition(position).toString().contains("WPA")) {                    // secured network                    ssid_password.setHint(getResources().getString(R.string.secured));                    ssid_password.setEnabled(true);                    titleKeyItemSpinner.setVisibility(View.GONE);                    mKeyItemSpinner.setVisibility(View.GONE);                } else if (parent.getItemAtPosition(position).toString().contains("WEP")) {                    mKeyItemSpinner.setVisibility(View.VISIBLE);                    titleKeyItemSpinner.setVisibility(View.VISIBLE);                    /* Enabling KeyWep*/                    String[] mKeyWep = getResources().getStringArray(R.array.keyitem_array);                    ArrayAdapter<String> mKeyMgtItem = new ArrayAdapter<String>                            (ssid_configuration.this, android.R.layout.simple_spinner_item, mKeyWep);                    mKeyMgtItem.setDropDownViewResource                            (android.R.layout.simple_spinner_dropdown_item);                    mKeyItemSpinner.setAdapter(mKeyMgtItem);                    // open network                    ssid_password.setHint("WEP ");                    ssid_password.setEnabled(true);                } else {                    titleKeyItemSpinner.setVisibility(View.GONE);                    mKeyItemSpinner.setVisibility(View.GONE);                    // open network                    ssid_password.setHint(getResources().getString(R.string.open));                    ssid_password.setEnabled(false);                    passwordLyt.setVisibility(View.GONE);                }            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        mKeyItemSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                wifiConnect.setKeyIndexForWEP(parent.getItemAtPosition(position).toString());            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        if (wifiConnect.getAllSacDevice().length == 0) {            wifiConnect.addSacDevices("No SAC DEVCICE FOUND");        }        outdoorHNPassphrase.setOnEditorActionListener(new TextView.OnEditorActionListener() {            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {                if (actionId == EditorInfo.IME_ACTION_GO) {                    sacSave.performClick();                    return true;                }                return false;            }        });    }    private void getScanResult(){        LSDeviceClient lsDeviceClient = new LSDeviceClient();        LSDeviceClient.DeviceNameService ScanResult = lsDeviceClient.getDeviceNameService();        ScanResult.getScanResult(new Callback<Object>() {            @Override            public void success(Object mScanResult, Response response) {                /* retry if the ScanResult is null*/                if(mScanResult==null) {               closeLoader();                    return;                }                //JSONObject mJsonObject = new JSONObject(mScanResult.toString());                parseJson(mScanResult.toString());                closeLoader();            }            @Override            public void failure(RetrofitError error) {            }        });    }    private void getScanResultsForIp(final String deviceIp) {        final String BASE_URL = "http://"+deviceIp+":80";        LSDeviceClient lsDeviceClient = new LSDeviceClient(BASE_URL);        LSDeviceClient.DeviceNameService ScanResult = lsDeviceClient.getDeviceNameService();        ScanResult.getScanResult(new Callback<Object>() {            @Override            public void success(Object mScanResult, Response response) {                if(mScanResult==null) {                    closeLoader();                }                parseJson(mScanResult.toString());                closeLoader();            }            @Override            public void failure(RetrofitError error) {                getScanResultsForIp(deviceIp);            }        });    }    private void DoAfterJsonLoaded(){        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>                (this, android.R.layout.simple_spinner_item, wifiConnect.getFilteredSSIDsArrayList().toArray(new String[0]));        dataAdapter.setDropDownViewResource                (android.R.layout.simple_spinner_dropdown_item);        ArrayList<String> mSSIDLIST = wifiConnect.getFilteredSSIDsArrayList();        mSsidSpinner.setAdapter(dataAdapter);        closeLoader();    }    private void parseJson(String mJson) {        try {            JSONObject jsonRootObject = new JSONObject(mJson);            //Get the instance of JSONArray that contains JSONObjects            JSONArray jsonArray = jsonRootObject.optJSONArray("Items");            //Iterate the jsonArray and print the info of JSONObjects            for(int i=0; i < jsonArray.length(); i++){                JSONObject jsonObject = jsonArray.getJSONObject(i);                String SSIDName = jsonObject.optString("SSID").toString();                String Security = jsonObject.optString("Security").toString();                String mSSSIDNAmeDummy = Html.fromHtml(SSIDName).toString();                String mSecurityNAmeDummy = Html.fromHtml(Security).toString();                LibreLogger.d(this, "SSIDNAMe" + mSSSIDNAmeDummy + " :: Security" + mSecurityNAmeDummy);                mUnSortedHashmap.put(mSSSIDNAmeDummy, mSecurityNAmeDummy);               //               // WifiConnection.getInstance().putWifiScanResultSecurity(mSSSIDNAmeDummy, mSecurityNAmeDummy);            }            SortTheList(mUnSortedHashmap);            /*To Load the Screen After the Json is Loaded*/            DoAfterJsonLoaded();        } catch (JSONException e) {            e.printStackTrace();        }    }    private TreeMap<String,String> mUnSortedHashmap = new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);    private void SortTheList(TreeMap<String,String> mUnMap){        Map<String, String> treeMap = new TreeMap<String, String>(mUnMap);        Set s = treeMap.entrySet();        Iterator it = s.iterator();        while ( it.hasNext() ) {            Map.Entry entry = (Map.Entry) it.next();            String key = (String) entry.getKey();            String value = (String) entry.getValue();            System.out.println(key + " => " + value);            WifiConnection.getInstance().putWifiScanResultSecurity(key,value);        }    }public void mDisplaySsidBasedInformation(String mSsidName){        final String security = wifiConnect.getSSIDForSending(wifiConnect.getWifiScanResutSecurity(                mSsidName));        Log.e("SECURITY", security);    passwordLyt.setVisibility(View.VISIBLE);        if (security.equalsIgnoreCase("NONE")) {            titleKeyItemSpinner.setVisibility(View.GONE);            mKeyItemSpinner.setVisibility(View.GONE);            ssid_password.setHint("OPEN  ");            passwordLyt.setVisibility(View.GONE);        }else if(security.equalsIgnoreCase("WEP")) {            ssid_password.setHint("WEP");            titleKeyItemSpinner.setVisibility(View.VISIBLE);            mKeyItemSpinner.setVisibility(View.VISIBLE);                    /* Enabling KeyWep*/            String[] mKeyWep = getResources().getStringArray(R.array.keyitem_array);            ArrayAdapter<String> mKeyMgtItem = new ArrayAdapter<String>                    (ssid_configuration.this, android.R.layout.simple_spinner_item, mKeyWep);            mKeyMgtItem.setDropDownViewResource                    (android.R.layout.simple_spinner_dropdown_item);            mKeyItemSpinner.setAdapter(mKeyMgtItem);        }else{            titleKeyItemSpinner.setVisibility(View.GONE);            mKeyItemSpinner.setVisibility(View.GONE);            ssid_password.setHint(getResources().getString(R.string.secured)); // String.xml        }        setPassphraseVisibility(mSsidName);        wifiConnect.setMainSSIDSec(security);        wifiConnect.setMainSSID(mSsidName);        ssid_password.setText(getSSIDPasswordFromSharedPreference(wifiConnect.getMainSSID()));    }    private void setPassphraseVisibility(String device) {        /*for open network we should't give password to fill make it gone*/        try {            final String security = wifiConnect.getSSIDForSending(wifiConnect.getWifiScanResutSecurity(device));            passwordLyt.setVisibility(View.VISIBLE);            ssid_password.setEnabled(true);            if (security != null && security.equalsIgnoreCase("NONE")) {                /*making password field visibility gone*/                ssid_password.setEnabled(false);                passwordLyt.setVisibility(View.GONE);                Log.d(TAG, "setPassphraseVisibility() called with: " + "device = [" + device + "]");            }        } catch (Exception e) {            e.printStackTrace();        }    }    private void goNext() {/* We are storing the friendly name of the device being configured as we need       to show the suceess message after its discovery */        LibreLogger.d(this, "goNext");        /* if we Doing Manual Config , then we dont need to store the SAC_Configured*/        if(!activityName.equals("LSSDPDeviceNetworkSettings")) {         /*   SharedPreferences sharedPreferences = getApplicationContext()                    .getSharedPreferences("sac_configured", Context.MODE_PRIVATE);            SharedPreferences.Editor editor = sharedPreferences.edit();            LibreLogger.d(this, "goNext putting values");            editor.putString("deviceFriendlyName", deviceName.getText().toString());            LibreLogger.d(this, "goNext after" + deviceName.getText().toString());            editor.commit();            LibreLogger.d(this, "goNext comitted");*/        }        LibreApplication.thisSACConfiguredFromThisApp = deviceName.getText().toString();        String ssid_password_str = ssid_password.getText().toString().trim();        wifiConnect.setMainSSIDPwd(ssid_password_str);        if (activityName.equals("LSSDPDeviceNetworkSettings")) {            LUCIControl mLuci = new LUCIControl(deviceIp);            mLuci.SendCommand(125, wifiConnect.getMainSSID() + "," + ssid_password_str, 2);            Intent ssid = new Intent(ssid_configuration.this, NewSacActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            finish();            startActivity(ssid);        }else {            Thread t = new Thread(new sendPostRunnable(deviceName.getText().toString()));            t.start();        }        showLoader("Configuring Device");    }    @Override    public void deviceDiscoveryAfterClearingTheCacheStarted() {    }    @Override    public void newDeviceFound(LSSDPNodes node) {    }    @Override    public void deviceGotRemoved(String mIpAddress) {    }    @Override    public void messageRecieved(NettyData packet) {    }    HttpURLConnection httpPostingDataUrlConnection = null;    /* Added By karuna, When a Device Name Change is Happend We have to Change to loader to Device Is rebooting */    private boolean mDeviceNameChangeHappend = false;    class sendPostRunnable implements Runnable {        String strTxt = null;        //        public sendPostRunnable(String strTxt) {            this.strTxt = strTxt;        }        @Override        public void run() {            String result = sendPostDataToInternet(strTxt);        }    }    private String sendPostDataToInternet(String strTxt) {        handleScanResultsAvailable();        String mURLLink = "";        /* HTTP Post */        if (activityName.equals("LSSDPDeviceNetworkSettings")) {            mURLLink = "http://" + deviceIp + ":80/goform/ProfileSettingHandler";        } else {            mURLLink = "http://192.168.43.1:80/goform/HandleSACConfiguration";        }        LibreLogger.d(this, "Connection Link  " + mURLLink);        try {            String sDeviceName = wifiConnect.getssidDeviceNameSAC(deviceSSID.toString());//deviceName.getText().toString(); //wifiConnect.getssidDeviceNameSAC(strTxt);            URL url = new URL(mURLLink);            httpPostingDataUrlConnection = (HttpURLConnection) url.openConnection();            httpPostingDataUrlConnection.setConnectTimeout(60000);            httpPostingDataUrlConnection.setReadTimeout(60000);            httpPostingDataUrlConnection.setRequestMethod("POST");            Map<String, Object> params = new LinkedHashMap<>();            params.put("data", strTxt);            if (activityName.equals("LSSDPDeviceNetworkSettings")) {                /* Here we need to add the "\n as this indicates the manual config"*/                params.put("SSID", wifiConnect.getMainSSID() + "\n");            } else {                params.put("SSID", wifiConnect.getMainSSID());            }LibreLogger.d(this, "sending wifi ssid " + wifiConnect.getMainSSID());            if (wifiConnect.getMainSSIDPwd() != null)                params.put("Passphrase", wifiConnect.getMainSSIDPwd().trim());            else                params.put("Passphrase", "");            LibreLogger.d(this, "sending wifi passphrase " + wifiConnect.getMainSSIDPwd());               /* params.put("Passphrase", wifiConnect.getMainSSIDPwd());*/            LibreLogger.d(this, "sending wifi security as " + wifiConnect.getMainSSIDSec());            params.put("Security", wifiConnect.getMainSSIDSec());            if(wifiConnect.getMainSSIDSec().equalsIgnoreCase("WEP")) {                String mValue = WifiConnection.getInstance().getKeyIndexForWEP();                if(mValue!=null) {                    params.put("Key_Index", mValue);                }            }            if (strTxt.equals("") || activityName.equals("LSSDPDeviceNetworkSettings") || strTxt.equals(sDeviceName)) {                mDeviceNameChangeHappend = false;                params.put("Devicename", "");            } else {                if (!deviceName.getText().toString().equals("") && (deviceName.getText().toString().getBytes().length <= 50)) {                    mDeviceNameChangeHappend = true;                    /* Replacing For reoving \n From the Last String  */                    String mModifiedStringText = strTxt.trim(); /*strTxt.replaceAll("\n", "");*/                    params.put("Devicename", mModifiedStringText);                } else {                    if (!(ssid_configuration.this.isFinishing())) {                        if (strTxt.toString().equals("")) {                            new AlertDialog.Builder(ssid_configuration.this)                                    .setTitle(getString(R.string.deviceNameChanging))                                    .setMessage( getString(R.string.failed)+"\n " +                                            getString(R.string.deviceNamecannotBeEmpty))                                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int which) {                                            dialog.cancel();                                        }                                    }).setIcon(android.R.drawable.ic_dialog_alert)                                    .show();                        } else if (strTxt.getBytes().length > 50) {                            new AlertDialog.Builder(ssid_configuration.this)                                    .setTitle(getString(R.string.deviceNameChanging))                                    .setMessage( getString(R.string.failed)+" \n " +                                            getString(R.string.deviceLength))                                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int which) {                                            dialog.cancel();                                        }                                    }).setIcon(android.R.drawable.ic_dialog_alert)                                    .show();                        }                    }                    params.put("Devicename", "");                }            }            StringBuilder postData = new StringBuilder();            for (Map.Entry<String, Object> param : params.entrySet()) {                if (postData.length() != 0) postData.append('&');                postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));                postData.append('=');                postData.append(URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));            }            /*Storing ssid password in shared preference*/            storeSSIDInfoToSharedPreferences(wifiConnect.getMainSSID(), wifiConnect.getMainSSIDPwd());            String urlParameters = postData.toString();            httpPostingDataUrlConnection.setDoOutput(true);            OutputStreamWriter writer = new OutputStreamWriter(httpPostingDataUrlConnection.getOutputStream());            LibreLogger.d(this, "UrLParameter Going To REtuen 1 Ssid" + wifiConnect.getMainSSID());            LibreLogger.d(this, "UrLParameter Going To REtuen 2 Password" + wifiConnect.getMainSSIDPwd());            LibreLogger.d(this, "UrLParameter Going To REtuen 3 security" + wifiConnect.getMainSSIDSec());            LibreLogger.d(this, "UrLParameter Going To REtuen " + urlParameters);            writer.write(urlParameters);            writer.flush();            writer.close();            wifiConnect.setmSACDevicePostDone(true);            /* Karuna Device Name Change Is happend So Device is Going To reboot....*/            if (mDeviceNameChangeHappend) {                showLoader(getString(R.string.deviceRebooting));                mDeviceNameChangeHappend = false;            }            mHandler.sendEmptyMessageDelayed(Constants.HTTP_POST_DONE_SUCCESSFULLY, 60000);            try {                LibreLogger.d(this, "Got the Response");                int responseCode = httpPostingDataUrlConnection.getResponseCode();                BufferedReader bufferedReader = null;                String str = "";                if (200 <= httpPostingDataUrlConnection.getResponseCode() && httpPostingDataUrlConnection.getResponseCode() <= 299) {                    bufferedReader = new BufferedReader(new InputStreamReader((httpPostingDataUrlConnection.getInputStream())));                } else {                    bufferedReader = new BufferedReader(new InputStreamReader((httpPostingDataUrlConnection.getErrorStream())));                }                if (bufferedReader != null) {                    String line = "";                    try {                        while ((line = bufferedReader.readLine()) != null) {                            str += (line + "\n");                        }                    } catch (IOException e) {                        LibreLogger.d(this, "Exception Happend IO ");                    }                    System.out.println("\nSending 'POST' request to URL : " + url);                    System.out.println("Post parameters : " + urlParameters);                    System.out.println("Response Code : " + responseCode);                    System.out.println("Response Message : " + str);                    if (str.contains("SAC credentials received ")) {                        mHandler.removeMessages(Constants.HTTP_POST_DONE_SUCCESSFULLY);                        mHandler.sendEmptyMessage(Constants.HTTP_POST_DONE_SUCCESSFULLY);                        LibreError error = new LibreError("Successfully Credentials posted ,", str);                        BusProvider.getInstance().post(error);                    } else {                        LibreError error = new LibreError("Some Error Happend , Start Connecting To Main Network Credientials  ," +                                "and Got Response Message as ", str);                        BusProvider.getInstance().post(error);                    }                }            } catch (Exception e) {                e.printStackTrace();                mHandler.removeMessages(Constants.HTTP_POST_DONE_SUCCESSFULLY);                mHandler.sendEmptyMessage(Constants.HTTP_POST_DONE_SUCCESSFULLY);/*                LibreError error = new LibreError("Exception  Happend , Start Connecting To Main Network Credientials  ," ,                        "in getting Response" );                BusProvider.getInstance().post(error);*/            }            wifiConnect.setmSACDevicePostDone(true);        } catch (Exception e) {            wifiConnect.setmSACDevicePostDone(false);            e.printStackTrace();            LibreLogger.d(this, "Exception Happend ");            mHandler.sendEmptyMessage(Constants.HTTP_POST_FAILED);        }        return "DONE";    }    /*It will store ssid password to shared preference*/    private void storeSSIDInfoToSharedPreferences(String deviceSSID, String password) {        SharedPreferences pref = getApplicationContext()                .getSharedPreferences("Your_Shared_Prefs", Context.MODE_PRIVATE);        SharedPreferences.Editor editor = pref.edit();        editor.putString(deviceSSID, password);        editor.apply();    }    /*It will get password for corresponding ssid */    private String getSSIDPasswordFromSharedPreference(String deviceSSID) {        SharedPreferences pref = getApplicationContext()                .getSharedPreferences("Your_Shared_Prefs", Context.MODE_PRIVATE);        return pref.getString(deviceSSID, "");    }    Handler mHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            if (msg.what == Constants.HTTP_POST_DONE_SUCCESSFULLY) {                closeLoader();               // showLoader(getString(R.string.changingNetwork));/* Increasing the Timeout as per the BAlaBharathi Comment By KK*/                Intent ssid = new Intent(ssid_configuration.this, ConnectingToMainNetwork.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                startActivity(ssid);                finish();               // connectToSpecificNetwork(wifiConnect.getMainSSID(), wifiConnect.getMainSSIDPwd(), wifiConnect.getMainSSIDSec());                      /*if(activityName.equals("LSSDPDeviceNetworkSettings")){                    Intent ssid = new Intent(ssid_configuration.this, NewSacActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    ssid.putExtra("mSacDevice",false);                    ssid.putExtra("mManaulConfig", true);                    wifiConnect.setmSACDevicePostDone(true);                    wifiConnect.clearSacDevices();                    closeLoader();                    finish();                    startActivity(ssid);                }else {                    Intent ssid = new Intent(ssid_configuration.this, NewSacActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    ssid.putExtra("mSacDevice",true);                    ssid.putExtra("mManaulConfig", false);                    wifiConnect.setmSACDevicePostDone(true);                    wifiConnect.clearSacDevices();                    closeLoader();                    finish();                    startActivity(ssid);                }*/            } else if (msg.what == Constants.CONNECTED_TO_MAIN_SSID_SUCCESS) {                LibreLogger.d(this, "Connected To Main SSID ");                if (!wifiConnect.getPreviousSSID().equalsIgnoreCase(wifiConnect.getMainSSID())) {                    LibreError error = new LibreError("Connected To ", wifiConnect.getMainSSID() + "\n App is Restarting");                    BusProvider.getInstance().post(error);                    closeLoader();                    //  finish();                    restartApplicationForNetworkChanges(ssid_configuration.this, wifiConnect.getMainSSID());                } else {                   /* cleanUpcode(ssid_configuration.this);                    *//*restartApp(ssid_configuration.this);*//*                    restartAllSockets(ssid_configuration.this);*/                    closeLoader();                    restartApplicationForNetworkChanges(ssid_configuration.this, wifiConnect.getMainSSID());                    Intent ssid = new Intent(ssid_configuration.this, NewSacActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    startActivity(ssid);                    ActivityCompat.finishAffinity(ssid_configuration.this);                }            } else if (msg.what == Constants.HTTP_POST_FAILED) {            } else if (msg.what == Constants.HTTP_POST_FAILED) {                closeLoader();                Toast.makeText(ssid_configuration.this, getString(R.string.httpPostFailed), Toast.LENGTH_LONG).show();            } else {                 LibreError error = new LibreError("Not able to connect " , wifiConnect.getMainSSID());                 BusProvider.getInstance().post(error);                ;  closeLoader();                //Toast.makeText(ssid_configuration.this, "Not able to connect " + wifiConnect.getMainSSID(), Toast.LENGTH_LONG).show();                finish();                /* * Finish this activity, and tries to finish all activities immediately below it     * in the current task that have the same affinity.*/                 ActivityCompat.finishAffinity(ssid_configuration.this);                 /* Killing our Android App with The PID For the Safe Case */                 int pid = android.os.Process.myPid();                 android.os.Process.killProcess(pid);                /* Intent ssid = new Intent(ssid_configuration.this, NewSacActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                startActivity(ssid); */            }        }    };    /**     * Broadcast receiver for connection related events     */    private class ConnectionReceiver extends BroadcastReceiver {        private String mNetworkSsidToConnect;        ConnectionReceiver(String ssid) {            mNetworkSsidToConnect = ssid;        }        @Override        public void onReceive(Context context, Intent intent) {            ConnectivityManager cm = (ConnectivityManager) context.getSystemService(context.CONNECTIVITY_SERVICE);            NetworkInfo networkInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);            WifiInfo wifiInfo = mWifiManager.getConnectionInfo();            LibreLogger.d(this, "OnRecieve Method: Wifi Info " + wifiInfo.getSSID());            LibreLogger.d(this, "OnRecieve Method: mNetworkSSIDToConnect " + mNetworkSsidToConnect);            LibreLogger.d(this, "OnRecieve Method: Network State " + networkInfo.getState());            LibreLogger.d(this, "OnRecieve Method: Network Detailed State " + networkInfo.getDetailedState());            LibreLogger.d(this, "Supplicant State " + wifiInfo.getSupplicantState());            if(wifiInfo.getSupplicantState() == SupplicantState.INACTIVE){                LibreError error = new LibreError("Not able to connect ", wifiConnect.getMainSSID() +                        "Authentication Error  , App Will be closed ");                BusProvider.getInstance().post(error);                if(mHandler.hasMessages(Constants.CONNECTED_TO_MAIN_SSID_FAIL))                    mHandler.removeMessages(Constants.CONNECTED_TO_MAIN_SSID_FAIL);                mHandler.sendEmptyMessageDelayed(Constants.CONNECTED_TO_MAIN_SSID_FAIL, 5000);            }            if (networkInfo != null && (networkInfo.isConnected())) {                if (wifiInfo.getSupplicantState() == SupplicantState.COMPLETED) {                    LibreLogger.d(this, " 1 OnRecieve Wifi Info " + wifiInfo.getSSID());                    LibreLogger.d(this, " 1 OnRecieve mNetworkSSIDToConnect " + mNetworkSsidToConnect);                    LibreLogger.d(this, " 1 OnRecieve Network State " + networkInfo.getState());                    if (wifiInfo.getSSID().contains(mNetworkSsidToConnect)) {                      //  mHandler.sendEmptyMessage(Constants.CONNECTED_TO_MAIN_SSID_SUCCESS);                    }else if(!wifiInfo.getSSID().contains(Constants.WAC_SSID)){                        LibreError error = new LibreError("Not able to connect to ", wifiConnect.getMainSSID() +                                "  but Connected To " + wifiInfo.getSSID());                        BusProvider.getInstance().post(error);                        if(mHandler.hasMessages(Constants.CONNECTED_TO_MAIN_SSID_FAIL))                            mHandler.removeMessages(Constants.CONNECTED_TO_MAIN_SSID_FAIL);                        mHandler.sendEmptyMessageDelayed(Constants.CONNECTED_TO_MAIN_SSID_FAIL, 5000);                    }                }            }        }    }    /* Shfit Piriorty and Save */    private int shiftPriorityAndSave(final WifiManager wifiMgr) {        final List<WifiConfiguration> configurations = wifiMgr.getConfiguredNetworks();        final int size = configurations.size();        for (int i = 0; i < size; i++) {            final WifiConfiguration config = configurations.get(i);            config.priority = i;            wifiMgr.updateNetwork(config);        }        wifiMgr.saveConfiguration();        return size;    }    /**     * Start to connect to a specific wifi network     */    public void connectToSpecificNetwork(final String mNetworkSsidToConnect, final String mNetworkPassKeyToConnect, final String mNetworkSecurityToConnect) {        new Thread(new Runnable() {            @Override            public void run() {                ConnectivityManager cm = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);                NetworkInfo networkInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);                WifiInfo wifiInfo = mWifiManager.getConnectionInfo();                if (networkInfo.isConnected() && wifiInfo.getSSID().replace("\"", "").equals(mNetworkSsidToConnect)) {               //     mHandler.sendEmptyMessage(Constants.CONNECTED_TO_MAIN_SSID_SUCCESS);                    return;                }                final WifiConfiguration conf = new WifiConfiguration();                conf.allowedAuthAlgorithms.clear();                conf.allowedGroupCiphers.clear();                conf.allowedPairwiseCiphers.clear();                conf.allowedProtocols.clear();                conf.allowedKeyManagement.clear();                LibreLogger.d(this, "Network Security  Scan Resut To Connect From Function " + getScanResultSecurity(mNetworkSecurityToConnect));                LibreLogger.d(this, "Network Security To Connect " + mNetworkSecurityToConnect);                conf.SSID = convertToQuotedString(mNetworkSsidToConnect);  //convertToQuotedString(mScanResult.SSID);                // Make it the highest priority.                int newPri = getMaxPriority(mWifiManager) + 1;                if (newPri > MAX_PRIORITY) {                    newPri = shiftPriorityAndSave(mWifiManager);                }                LibreLogger.d(this, "Network Security To Connect " + mNetworkSecurityToConnect +                        "priority Generated is " + newPri);                conf.status = WifiConfiguration.Status.ENABLED;                conf.priority = newPri;                switch (getScanResultSecurity(mNetworkSecurityToConnect)) {                    case WEP:                        conf.wepKeys[0] = "\"" + mNetworkPassKeyToConnect + "\"";                        conf.wepTxKeyIndex = 0;                        conf.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);                        conf.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);                        break;                    case PSK:                        conf.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);                        conf.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);                        conf.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);                        conf.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);                        conf.preSharedKey = "\"" + mNetworkPassKeyToConnect + "\"";                        conf.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);                        conf.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);                        conf.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);                        conf.allowedProtocols.set(WifiConfiguration.Protocol.RSN); // For WPA2                        conf.allowedProtocols.set(WifiConfiguration.Protocol.WPA); // For WPA                        break;                    case OPEN:                        conf.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);                        conf.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.NONE);                        conf.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);                        break;                }               // mWifiManager.disconnect();                // mWifiManager.saveConfiguration();                int netId = mWifiManager.addNetwork(conf);                LibreLogger.d(this, "Netid We got For the Ssid is " + mNetworkSsidToConnect +                        "and Netid is " + netId);                if (netId == -1) {                    LibreLogger.d(this, "Failed to set the settings for  " + mNetworkSsidToConnect);                    final List<WifiConfiguration> mWifiConfiguration = mWifiManager.getConfiguredNetworks();                    for (int i = 0; i < mWifiConfiguration.size(); i++) {                        String configSSID = mWifiConfiguration.get(i).SSID;                        LibreLogger.d(this, "Config SSID" + configSSID + "Active SSID" + conf.SSID);                            if(configSSID.equals(conf.SSID))                            {                                netId =mWifiConfiguration.get(i).networkId;                                LibreLogger.d(this,"network id"+netId);                                break;                            }                        }                }                   /* if (netId == -1) {                        final List<WifiConfiguration> configurations = mWifiManager.getConfiguredNetworks();                        final int size = configurations.size();                        for (int i = 0; i < size; i++) {                            final WifiConfiguration config = configurations.get(i);                            config.priority = conf.priority;                            mWifiManager.updateNetwork(config);                        }                        mWifiManager.saveConfiguration();                    }*/                //  mWifiManager.disconnect();                connectionReceiver = new ConnectionReceiver(mNetworkSsidToConnect);                IntentFilter intentFilter = new IntentFilter();                intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");                intentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);                intentFilter.addAction("android.net.wifi.WIFI_STATE_CHANGED");                intentFilter.addAction("android.net.wifi.STATE_CHANGE");                intentFilter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);                intentFilter.addAction(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION);                registerReceiver(connectionReceiver, intentFilter);                  /*  closeLoader();                    showLoader("Changing the network");*//* Increasing the Timeout as per the BAlaBharathi Comment By KK*/                mHandler.sendEmptyMessageDelayed(Constants.CONNECTED_TO_MAIN_SSID_FAIL, 60000);                //disabling other networks                List<WifiConfiguration> networks = mWifiManager.getConfiguredNetworks();                Iterator<WifiConfiguration> iterator = networks.iterator();                while (iterator.hasNext()) {                    WifiConfiguration wifiConfig = iterator.next();                    if (wifiConfig.SSID.equals(mNetworkSsidToConnect))                        netId = wifiConfig.networkId;                    else                        mWifiManager.disableNetwork(wifiConfig.networkId);                }                boolean mCatchDisconnect = mWifiManager.enableNetwork(netId, true);                LibreLogger.d(this, "Wifi MAnager calling enableNetwork" + mCatchDisconnect);                //  mWifiManager.reconnect();            }        }).start();    }    /* Setting Maximum Priority to Wifi Network */    private int getMaxPriority(final WifiManager wifiManager) {        final List<WifiConfiguration> configurations = wifiManager.getConfiguredNetworks();        int pri = 0;        for (final WifiConfiguration config : configurations) {            if (config.priority > pri) {                pri = config.priority;            }        }        return pri;    }    /* Converting a String to Quoted String    * Syntax for Setting SSID in wifi Conf : / SSIDNAME /*/    public String convertToQuotedString(String string) {        if (TextUtils.isEmpty(string)) {            return "";        }        final int lastPos = string.length() - 1;        if (lastPos > 0 && (string.charAt(0) == '"' && string.charAt(lastPos) == '"')) {            return string;        }        return "\"" + string + "\"";    }    private String getScanResultSecurity(String mSecurity) {        final String[] securityModes = {WEP, PSK};        for (int i = securityModes.length - 1; i >= 0; i--) {            if (mSecurity.contains(securityModes[i])) {                return securityModes[i];            }        }        return OPEN;    }    public void processBackPress(){        if(activityName!=null && activityName.equals("LSSDPDeviceNetworkSettings"))        {            finish();        }        else        {            final Intent intent = new Intent(ssid_configuration.this, NewSacActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            startActivity(intent);            finish();        }    }}