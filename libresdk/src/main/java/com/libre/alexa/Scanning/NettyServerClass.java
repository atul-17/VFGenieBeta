package com.libre.alexa.Scanning;import com.libre.alexa.util.LibreLogger;import org.jboss.netty.bootstrap.ServerBootstrap;import org.jboss.netty.channel.Channel;import org.jboss.netty.channel.ChannelFactory;import org.jboss.netty.channel.ChannelPipeline;import org.jboss.netty.channel.ChannelPipelineFactory;import org.jboss.netty.channel.Channels;import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;import java.net.InetSocketAddress;import java.util.concurrent.Executors;public class NettyServerClass {	public  final int LSSDP_PORT = 1800;	public Channel mServerChannel;	public ServerBootstrap bootstrap;	private static final String LOCAL_ADDR = "192.168.0.18";	private static final String MCAST_GROUP = "239.254.42.96";	private static final int MCAST_PORT = 9796;	public boolean startServer(int mPortToConnect) throws Exception {		ChannelFactory factory =				new NioServerSocketChannelFactory(						Executors.newCachedThreadPool(),						Executors.newCachedThreadPool());		bootstrap = new ServerBootstrap(factory);		bootstrap.setPipelineFactory(new ChannelPipelineFactory() {			public ChannelPipeline getPipeline() {				return Channels.pipeline(new EchoServerHandler());			}		});		bootstrap.setOption("child.tcpNoDelay", true);		bootstrap.setOption("child.keepAlive", true);		bootstrap.setOption("child.reuseaddress", true);		bootstrap.setOption("localAddress", new InetSocketAddress(mPortToConnect));		bootstrap.setOption("child.reuseaddress", true);		bootstrap.setOption("reuseAddress", true);		bootstrap.setOption("tcpNoDelay", true);        /* Keep Alive Have to be there For Long hour Connection */		bootstrap.setOption("keepAlive",true);            /* Backlogs for concurrent TCP connections */		bootstrap.setOption("backlog", 30);		bootstrap.setOption("localAddress", new InetSocketAddress(new Utils().getIPAddress(true),mPortToConnect));		//bootstrap.releaseExternalResources();		mServerChannel = bootstrap.bind(new InetSocketAddress(new Utils().getIPAddress(true),mPortToConnect));		System.out.println("Server Started!"+ mServerChannel.getLocalAddress());		LibreLogger.d(this, "Netty TCP Server Listening  Status "				+ mServerChannel.isConnected());		return (mServerChannel!=null);	}}